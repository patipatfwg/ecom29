<?php
namespace App\Http\Controllers\EPOS;

use App\Http\Controllers\EPOS\Models\CustomerInformation;
use App\Http\Requests\InvoiceReplaceRequest;
use App\Repositories\PrintCounterRepository;
use App\Repositories\ReplaceInvoiceRepository;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Response;
use Illuminate\Support\Facades\View;
use App\Http\Controllers\EPOS\Helper\NumberThai;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Input;
use DateTime;
use stdClass;
use App\Services\Guzzle;
use App\Http\Controllers\TemplateController;
use App\Repositories\PermissionRepository;
use App\Repositories\UsersRepository;
use Session;
use PDF;
use Illuminate\Support\Facades\Storage;

class InvoicesController extends EPOSBaseController
{   
    protected $templateController;
  
    public function __construct(UsersRepository $usersRepository, PermissionRepository $permissionRepository, TemplateController $templateController, Guzzle $guzzle)
    {
        parent::__construct($usersRepository, $permissionRepository, $guzzle); 

        $this->templateController = $templateController;
        $this->_messages          = config('message');
    }

    public function search(Request $request) {

        // get query string for search filters
        $searchType  = $request->get('search_type', 'sale_order_number');
        $searchValue = $request->get('search_value', '');
        $order_no    = $request->get('order_no', ''); // for mapping master data
 
        $orderNumber = '';
        $returnorderNumber = '';
        $invoice_number = '';

        if ($searchType === 'sale_order_number') { 
            $orderNumber = $searchValue;
        }
        else if ($searchType === 'return_order_number') {
            $orderNumber = $searchValue;
        }
        else if ($searchType === 'invoice_number') {
            $invoice_number = $searchValue;
        }
 
        session([
            'searchType' => $searchType,
            'searchValue' => $searchValue
        ]);

        if ($searchType == 'sale_order_number'){ $err_msg ='Invalid Sale Order Number!'; }
        else if ($searchType == 'invoice_number'){ $err_msg = 'Invalid Invoice Number!'; }
        else { $err_msg = 'Invalid Return Order Number!'; }

        $invoices = [];
        $invoiceDataSet = ''; // for dataTable
        if ($orderNumber != '') {
            $invoices = $this->getInvoices($orderNumber,$searchType);

            if ($invoices == '404') {
                return redirect('epos/invoice')->with('msg', 'Connection error!');
            }

            if ($invoices) {
                $invoiceDataSet = $this->_turnArrayInvoiceDetailToDataSet($invoices,$order_no);
                if (empty($invoiceDataSet)) {
                    return redirect('epos/invoice')->with('msg', $err_msg)->withInput(Input::all());
                }

            } else {
                return redirect('epos/invoice')->with('msg', $err_msg)->withInput(Input::all());
            }
        }
        else if ($invoice_number != '') {
            $invoices = $this->getInvoices($invoice_number,$searchType);
            //$invoices = $this->getInvoicesDetail($invoice_number);
            if ($invoices == '404') {

                return redirect('epos/invoice')->with('msg', 'Connection error!');
            }
            if ($invoices == '500') {
                return redirect('epos/invoice')->with('msg', $err_msg)->withInput(Input::all());
            }

            if ($invoices) {
                $invoiceDataSet = $this->_turnArrayInvoiceDetailToDataSet($invoices,$order_no);
                if (empty($invoiceDataSet)) {
                    return redirect('epos/invoice')->with('msg', $err_msg)->withInput(Input::all());
                }
            } else {
                return redirect('epos/invoice')->with('msg', $err_msg)->withInput(Input::all());
            }
        }
 

        return view('epos.invoice.index', [
            'order_number' => $orderNumber,
            'search_result' => $invoices,
            'invoice_dataset' => $invoiceDataSet
        ]);

    }

    private function _turnArrayInvoiceDetailToDataSet($arr,$order_no='')
    {
        $result = [];
        if (is_array($arr) && isset($arr[0])) {

            foreach ($arr[0] as $key => $invoice) {
                $order_no = ($order_no==='')? $invoice->OrderNo : $order_no;
                $check_invoice = false;
                // Check Duplicate for invoiceDetail
                if ($key > 0) {
                    foreach ($result as $i => $val) {
                        if (isset($invoice->ExtnNewInvoiceNumber) && ($invoice->ExtnNewInvoiceNumber != '')) {
                            if (!$check_invoice && ($val[1] == $invoice->ExtnNewInvoiceNumber)) {
                                $check_invoice = true;
                            }
                        } else {
                            if (!$check_invoice && ($val[1] == $invoice->InvoiceNo)) {
                                $check_invoice = true;
                            }
                        }
                    }
                }
        
                if (!$check_invoice) {

                    if(($invoice->InvoiceType == 'CREDIT_MEMO' || $invoice->InvoiceType == 'RETURN') && $invoice->ExtnStatus != 'Settled'){
                        // No.
                        $result[$key][] = sprintf('<span class="text-danger">%s</span>', $key + 1);
                        // Order Number
                        $result[$key][] =  sprintf('<span class="text-danger">%s</span>', !empty($order_no)? $order_no : $invoice->OrderNo );
                        
                        // Invoice Number
                        $result[$key][] = !empty($invoice->ExtnNewInvoiceNumber)? sprintf('<span class="text-danger">%s</span>',$invoice->ExtnNewInvoiceNumber) : sprintf('<span class="text-danger">%s</span>',$invoice->ExtnMakroInvoiceNumber);

                        // Create Date
                        $result[$key][] = sprintf('<span class="text-danger">%s</span>', $invoice->CreateDate);

                        // Invoice Type
                        $result[$key][] = sprintf('<span class="text-danger">%s</span>', $this->getInvoiceType($invoice->InvoiceType));

                        // Total Amount
                        $result[$key][] = isset($invoice->TotalAmount)? sprintf('<span class="text-danger">%s</span>', $invoice->TotalAmount) : '<span class="text-danger">0</span>';

                        // Print Counter
                        $result[$key][] = isset($invoice->PrintCounter)? sprintf('<span class="text-danger">%s</span>', $invoice->PrintCounter) : '<span class="text-danger">0</span>';

                        // Original Invoice Number
                        $result[$key][] = !empty($invoice->ExtnNewInvoiceNumber)? sprintf('<span class="text-danger">%s</span>', $invoice->ExtnMakroInvoiceNumber) : '<span class="text-danger"></span>';

                        // Issue Date
                        $result[$key][] = isset($invoice->IssueDate)? sprintf('<span class="text-danger">%s</span>', $invoice->IssueDate) : '<span class="text-danger"></span>';
                        
                        // Settlement Date
                        $result[$key][] = '';
                        
                        // Manage
                        $result[$key][] = '<a class="btnUpdate text-danger" href="javascript:void(0)" onclick="update(\''.$invoice->OrderInvoiceKey.'\', \''.$invoice->InvoiceNo.'\', \'' . $invoice->InvoiceType .'\', \'' . $invoice->SearchCriteria1 .'\', \'Settled\');"><strong>Confirm</strong></a>';
                    }
                    else{

                        // No.
                        $result[$key][] = $key + 1;

                        // Order Number
                        $result[$key][] = !empty($order_no)? $order_no : $invoice->OrderNo;

                        // Invoice Number
                        $result[$key][] = !empty($invoice->ExtnNewInvoiceNumber)? $invoice->ExtnNewInvoiceNumber : $invoice->ExtnMakroInvoiceNumber;

                        // Create Date
                        $result[$key][] = $invoice->CreateDate;

                        // Invoice Type
                        $result[$key][] = $this->getInvoiceType($invoice->InvoiceType);

                        // Total Amount
                        $result[$key][] = isset($invoice->TotalAmount)? $invoice->TotalAmount : '0';

                        // Print Counter
                        $result[$key][] = isset($invoice->PrintCounter)? $invoice->PrintCounter : '0';

                        // Original Invoice Number
                        $result[$key][] = !empty($invoice->ExtnNewInvoiceNumber)? $invoice->ExtnMakroInvoiceNumber : '';

                        // Issue Date
                        $result[$key][] = isset($invoice->IssueDate)? $invoice->IssueDate : '';

                        // Settlement Date
                        $result[$key][] = isset($invoice->ExtnSettlementDate)? $invoice->ExtnSettlementDate : '';

                        // Manage
                        $result[$key][] = '<a href="/epos/invoice/'.$invoice->OrderInvoiceKey.'?order_no='.$order_no.'" invoiceNo="'.$invoice->InvoiceNo.'" OrderNo="'.$order_no.'">Preview</a>';
                    }
                }
            }
        }
        return $result;
    }

    public function shouldUseLongForm($order) {
        $buyer = $order->buyer;
        $cardType = isset($buyer->makro_card_type)?$buyer->makro_card_type:'';
        $vatAddress = isset($buyer->vat_address)?$buyer->vat_address:'';
        $vatRegistered = isset($buyer->vat_registered)?$buyer->vat_registered:'';
        $commercialCertNo = isset($buyer->commercial_cert_no)?$buyer->commercial_cert_no:'';
        
        // Green card always use short form
        if ($cardType === 'green') {
            return false;
        }
        // If buyer doesnot have vat address always use short form
        else if ($vatAddress === 'N') {
            return false;
        }
        // Not a Green card member and has vatAddress
        else {
            if($vatRegistered === 'Y') {
                return ($commercialCertNo === 'N') ? false : true;
            }
            // Always use long form if has vatAddress and not has vatRegistered
            else {
                return true;
            }
        }
    }

    public function preview($invoice_number = '', Request $request)
    {
        if ($invoice_number == '') return abort(404);
        $order_number = $request->get('order_no', '');
        return $this->templateController->getInvoicePrint($invoice_number,$order_number);
    }
<<<<<<< HEAD

    public function preview3($invoice_number = '', Request $request)
    {
        if ($invoice_number == '') return abort(404);
        
        $order_number = $request->get('order_no', '');
        $pdfParams = $this->templateController->getInvoicePrint2($invoice_number,$order_number);
        $pdfName =  'test2.pdf'; //strtotime('now') . '.pdf';
        // /var/www/html/public/assets/images/epos/Logo-Makro.png
        // return View::make('template.print3', $pdfParams['data']);
        $pdf = PDF::loadView('template.print3', $pdfParams['data'], [], [
            'format' => 'A4',
            'margin_top' => '5',
            'margin_right' => '5',
            'margin-bottom' => '5',
            'margin_left' => '5'
        ]);
        $pdf->showImageErrors = true;
        $pdfParams['form_template'] = View::make('template.print3', $pdfParams['data'])->render();
        unset($pdfParams['data']);
        $pdfParams['pdfLocation'] = 'storage/' . $pdfName;

        // Storage::put('public/' . $pdfName, $pdfParams['form_template']);
        Storage::put('public/' . $pdfName, $pdf->output());
        // $pdf->output();
        return View::make('template.preview2', $pdfParams);
    }

    public function preview2($invoice_number = '') {

        if ($invoice_number == '') return abort(404);

        if ($invoice_number != '') {
            $invoices = $this->getInvoicesDetail($invoice_number);

            if ($invoices == '404') {
                //return redirect()->back()->withErrors('Connection error!, please try again')->withInput();
                return back()->with('msg', 'Connection error!')->withInput();
            }

            if ($invoices) {

                //CALL API for MasterInvoice Date
                if ($invoices[0][0]->InvoiceType == 'CREDIT_MEMO' || $invoices[0][0]->InvoiceType == 'RETURN' || $invoices[0][0]->InvoiceType == 'Return Invoiced') {

                    if ($invoices[0][0]->MasterInvoiceNo != '') {
                        $invoices_extra = $this->getInvoicesDetail($invoices[0][0]->MasterInvoiceNo);
                    } else {
                        $invoices_extra = false;
                    }

                    if ($invoices_extra == '404') {
                        $invoices[0][0]->MasterInvoiceDate = $invoices[0][0]->IssueDate;
                    }
                    if ($invoices_extra) {
                        $invoices[0][0]->MasterInvoiceDate = $invoices_extra[0][0]->IssueDate;
                    } else {
                        $invoices[0][0]->MasterInvoiceDate = $invoices[0][0]->IssueDate;
                    }

                } else {
                    $invoices[0][0]->MasterInvoiceDate = $invoices[0][0]->IssueDate;
                }
                //CALL API for MasterInvoice Date

                $deposit_summary = array("Deposit-NonVat"=>0,"Deposit-Vat"=>0,"Deposit"=>0);
                $deposit_data = array("VAT_CODE"=>"","AMT_EXCVAT"=>0,"AMT_VAT"=>0,"AMT_NORMAL"=>0,"AMT_DISCOUNT"=>0,"AMT_PRICE"=>0,"AMT_COMPLEX"=>0);

                $complex_summary = false;
                $complex_data = array("ID"=>"","CHARGE_NAME"=>"","COMPLEX_NAME"=>"","DISCOUNT"=>0,"REMAIN"=>0);
                $complex_vat_total = 0;
                $complex_nonvat_total = 0;
                $complex_discount_total = 0;

                $orderNo = $invoices[0][0]->OrderNo;

                if (substr($orderNo, 0, 1) == 'Y') {
                    // Get Order No from API Return Order Search
                    $orderFromReturn = $this->getOrderFromReturnOrder($invoices[0][0]->OrderNo);
                    $orderNo = $orderFromReturn[0]->orderNo;
                }

                $order = $this->getOrder($orderNo);

                if ($order == '404') {
                    return back()->with('msg', 'MS-Order Connection error')->withInput();
                }

                // dump($order); die;
                if ($order) {
                    foreach ($invoices[0] as $idx => $inv) {
//                        $invoices[0][$idx]->InvoiceType = 'RETURN';
//                        $invoices[0][$idx]->InvoiceType = 'CREDIT_MEMO';
//                        $invoices[0][$idx]->InvoiceType = 'SHIPMENT';
                        if (isset($order->orderProducts) && ($order->orderProducts != '')) {
                            foreach ($order->orderProducts as $key => $value) {
                                if ($invoices[0][$idx]->ItemID == $value->item_id) {
                                    $invoices[0][$idx]->VatRate = $value->vat_rate;
                                }
                            }
                        } else {
                            $invoices[0][$idx]->VatRate = (int)round($invoices[0][$idx]->TaxPercentage, 0);
                        }

                        // ********************************************
                        // PICK INFORMATION OF COMPLEX DISCOUNT SUMMARY
                        // ********************************************
                        if ($idx == 0) {
                            $disountcomplex = false;

                            // เก็บข้อมูล Complex Discount [ID, Name, Discount, Remain]
                            if (isset($order->data->order_lines->order_line) && ($order->data->order_lines->order_line != '')) {
                                foreach ($order->data->order_lines->order_line as $key => $value) {
                                    foreach ($invoices[0] as $a => $inv) {
                                        if (isset($value->item->item_id)) {
                                            if ($value->item->item_id == $inv->ItemID) {
                                                if (isset($value->line_charges->line_charge)) {
                                                    foreach ($value->line_charges->line_charge as $t => $charge) {
                                                        if ($charge->charge_category == 'COMPLEX_DISCOUNT') {
                                                            foreach ($value->promotions->promotion as $pro => $promotion) {
                                                                if ($pro == $t) {
                                                                    $complex_data["ID"] = isset($promotion->promotion_id) ? $promotion->promotion_id : '';
                                                                }
                                                            }
                                                            $complex_data["CHARGE_NAME"] = isset($charge->charge_name) ? $charge->charge_name : '';
                                                            foreach ($value->notes->note as $n => $note) {
                                                                //if ($n == $t) {
                                                                    $complex_data["COMPLEX_NAME"] = isset($note->note_text) ? $note->note_text : '';
                                                                //}
                                                            }
                                                            foreach ($order->orderProducts as $or => $product) {
                                                                if ($or == $key) {
                                                                    $cstoSatang = [];
                                                                    $cstoSatang[$or] = [
                                                                        'item_id'           => $charge->charge_name,
                                                                        'price'             => isset($charge->charge_per_unit) ? ($charge->charge_per_unit * $inv->Quantity) : 0,
                                                                        'vat_rate'          => $product->vat_rate,
                                                                        'quantity'          => 1
                                                                    ];

                                                                    $csi_price = $this->getSatangRounding($cstoSatang);
                                                                    if ($csi_price == '404') {
                                                                        return redirect()->back()->with('msg', '[API] Satang Rounding error, please try again')->withInput();
                                                                    }
                                                                    $complex_data["DISCOUNT"] = $csi_price[0]->total;

                                                                    if ($product->vat_rate == 7) {
                                                                        $complex_vat_total += $complex_data["DISCOUNT"];
                                                                    } else {
                                                                        $complex_nonvat_total += $complex_data["DISCOUNT"];
                                                                    }
                                                                    $complex_discount_total += $complex_data["DISCOUNT"];
                                                                }
                                                            }

                                                            $complex_data["REMAIN"] = $complex_data["DISCOUNT"];
                                                            $promotion_id = $complex_data["ID"];

                                                            $flag_dup = false;
                                                            if ($complex_summary) {
                                                                foreach ($complex_summary as $idis => $complex) {
                                                                    if ($promotion_id == $complex["ID"]) {
                                                                        $flag_dup = true;
                                                                    }
                                                                }
                                                            }
                                                            if (!$flag_dup) {
                                                                $complex_summary[$promotion_id] = $complex_data;
                                                            } else {
                                                                $complex_summary[$promotion_id]['DISCOUNT'] += $complex_data['DISCOUNT'];
                                                                $complex_summary[$promotion_id]['REMAIN'] += $complex_data['REMAIN'];
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
//                            dump($complex_summary);
//                            dump($complex_vat_total);
//                            dump($complex_nonvat_total);
//                            dump($complex_discount_total);
                        }

                        // ********************************************
                        // PICK SIMPLE DISCOUNT/ COMPLEX DISCOUNT PREPARE TO API SATANG_ROUNDING
                        // ********************************************
                        if (isset($order->data->order_lines->order_line)) {
                            foreach ($order->data->order_lines->order_line as $key => $order_line) {
                                if (isset($order_line->item->item_id)) {
                                    $line_item_id = $order_line->item->item_id;
                                    if ($invoices[0][$idx]->ItemID == $line_item_id) {
                                        if (isset($order_line->line_charges->line_charge)) {
                                            foreach ($order_line->line_charges->line_charge as $i => $value) {
                                                if ($value->charge_category == 'SIMPLE_DISCOUNT') {
                                                    $disounttoSatang[$line_item_id] = [
                                                        'item_id'           => $line_item_id,
                                                        'price'             => isset($value->charge_per_unit) ? ($value->charge_per_unit * $invoices[0][$idx]->Quantity) : 0,
                                                        'vat_rate'          => $invoices[0][$idx]->VatRate,
                                                        'quantity'          => 1,
                                                        'charge_name'       => isset($value->charge_name) ? $value->charge_name : ''
                                                    ];
                                                    $unitpricetoSatang[$line_item_id] = [
                                                        'item_id'           => $line_item_id,
                                                        'price'             => isset($value->charge_per_unit) ? $value->charge_per_unit : 0,
                                                        'vat_rate'          => $invoices[0][$idx]->VatRate,
                                                        'quantity'          => 1,
                                                        'charge_name'       => isset($value->charge_name) ? $value->charge_name : ''
                                                    ];
                                                }
                                                if ($value->charge_category == 'COMPLEX_DISCOUNT') {
                                                    $complextoSatang[$line_item_id] = [
                                                        'item_id'           => $line_item_id,
                                                        'price'             => isset($value->charge_per_unit) ? ($value->charge_per_unit * $invoices[0][$idx]->Quantity) : 0,
                                                        'vat_rate'          => $invoices[0][$idx]->VatRate,
                                                        'quantity'          => 1,
                                                        'charge_name'       => isset($value->charge_name) ? $value->charge_name : ''
                                                    ];
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

//                        dump($complextoSatang);
                        // ********************************************
                        // CALCULATE SIMPLE DISCOUNT PER UNIT FORM API SATANG_ROUNDING
                        // ********************************************
                        $unit_discount  = 0;
                        if (isset($unitpricetoSatang)) {
                            $perunit_price = $this->getSatangRounding($unitpricetoSatang);
                            if ($perunit_price == '404') {
                                return redirect()->back()->with('msg', '[API] Satang Rounding error, please try again')->withInput();
                            }
                            if ($perunit_price != '404') {
                                foreach ($perunit_price as $i => $item) {
                                    if ($invoices[0][$idx]->ItemID == $item->item_id) {
                                        $unit_discount += $item->total;
                                    }
                                }
                            }
                        }
                        $invoices[0][$idx]->Simple_Discount_PerUnit = $unit_discount;

                        // ********************************************
                        // CALCULATE SIMPLE DISCOUNT FORM API SATANG_ROUNDING
                        // ********************************************
                        $simple_discount  = 0;
                        if (isset($disounttoSatang)) {
                            $discount_price = $this->getSatangRounding($disounttoSatang);
                            if ($discount_price == '404') {
                                return redirect()->back()->with('msg', '[API] Satang Rounding error, please try again')->withInput();
                            }
                            if ($discount_price != '404') {
                                foreach ($discount_price as $i => $item) {
                                    if ($invoices[0][$idx]->ItemID == $item->item_id) {
                                        $simple_discount += $item->total;
                                    }
                                }
                            }
                        }
                        $invoices[0][$idx]->Simple_Discount = $simple_discount;

                        // ********************************************
                        // CALCULATE COMPLEX DISCOUNT FORM API SATANG_ROUNDING
                        // ********************************************
                        $complex_discount  = 0;
                        if (isset($complextoSatang)) {
                            $discount_complex = $this->getSatangRounding($complextoSatang);
                            if ($discount_complex == '404') {
                                return redirect()->back()->with('msg', '[API] Satang Rounding error, please try again')->withInput();
                            }
                            if ($discount_complex != '404') {
                                foreach ($discount_complex as $i => $item) {
                                    if ($invoices[0][$idx]->ItemID == $item->item_id) {
                                        $complex_discount += $item->total;
                                        foreach ($complextoSatang as $icom => $valcom) {
                                            if ($valcom['charge_name'] == $complextoSatang[$item->item_id]['charge_name']) {
                                                foreach ($complex_summary as $remain_complex) {
                                                    if ($remain_complex['CHARGE_NAME'] == $valcom['charge_name']) {
                                                        $remain_complex['REMAIN'] -= $item->total;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        $invoices[0][$idx]->Complex_Discount = $complex_discount;


//                        dump('$complex_summary');
//                        dump($complex_summary);
                        // ********************************************
                        // PREPARE ITEM PRICE TO API SATANG_ROUNDING
                        // ********************************************
                        if (isset($order->shoppingCart)) {
                            foreach ($order->shoppingCart as $key => $value) {

                                if ($invoices[0][$idx]->ItemID == $value->id) {

                                    $invoices[0][$idx]->ItemName = $value->name;

                                    $itemtoSatang[$key] = [
                                        'item_id'           => $value->id,
                                        'price'             => $value->price,
                                        'vat_rate'          => $invoices[0][$idx]->VatRate,
                                        'quantity'          => $invoices[0][$idx]->Quantity
                                    ];

                                }
                            }
                        }
                    }

//                    dump('$itemtoSatang');
//                    dump($itemtoSatang);
                    $price_non_vat = 0;
                    $price_exc_vat = 0;


                    // ********************************************
                    // PICK VAT (ITEM PRICE, SIMPLE DISCOUNT, COMPLEX DISCOUNT)
                    // ********************************************
                    foreach ($itemtoSatang as $ix => $item) {
                        if ($item['vat_rate'] == 0) {
                            $price_non_vat += $item['price'] * $item['quantity'];
                        } else {
                            $price_exc_vat += $item['price'] * $item['quantity'];
                        }
                    }
                    $simple_non_vat = 0;
                    $simple_exc_vat = 0;
                    if (isset($disounttoSatang)) {
//                        dump('$disounttoSatang');
//                        dump($disounttoSatang);
                        foreach ($disounttoSatang as $ix => $item) {
                            if ($item['vat_rate'] == 0) {
                                $simple_non_vat += $item['price'] * $item['quantity'];
                            } else {
                                $simple_exc_vat += $item['price'] * $item['quantity'];
                            }
                        }
                    }
                    $complex_non_vat = 0;
                    $complex_exc_vat = 0;
                    if (isset($complextoSatang)) {
//                        dump('$complextoSatang');
//                        dump($complextoSatang);
                        foreach ($complextoSatang as $ix => $item) {
                            if ($item['vat_rate'] == 0) {
                                $complex_non_vat += $item['price'] * $item['quantity'];
                            } else {
                                $complex_exc_vat += $item['price'] * $item['quantity'];
                            }
                        }
                    }

                    // ********************************************
                    // FORMULA TOTAL VAT TO DISPLAY INVOICE
                    // (ROUND(NP_EXCVAT * VAT/100),2) - (ROUND(SDi_EXCVAT * VAT/100),2) - (ROUND(CDi_EXCVAT * VAT/100),2)
                    // ********************************************
//                    $vat_grand_total = round(($price_exc_vat * (Config::get('invoice.vat_rate')/100)),2) - round(($simple_exc_vat * (Config::get('invoice.vat_rate')/100)),2) - round(($complex_exc_vat * (Config::get('invoice.vat_rate')/100)),2);
//                    $vat_grand_total = 0;
//                    dump('$vat_grand_total');
//                    dump($vat_grand_total);

                    // ********************************************
                    // CALCULATE ITEM PRICE FORM API SATANG_ROUNDING
                    // ********************************************
                    $items_price = $this->getSatangRounding($itemtoSatang);
//                    dump('$items_price');
//                    dump($items_price);
                    if ($items_price == '404') {
                        return redirect()->back()->with('msg', '[API] Satang Rounding error, please try again')->withInput();
//                        return redirect()->back()->withErrors('Satang Rounding error22, please try again')->withInput();
                    }

                    // ********************************************
                    // MAP ITEM PRICE TO INVOICE DATA
                    // ********************************************
                    foreach ($invoices[0] as $idx => $inv) {
                        foreach ($items_price as $key => $value) {
//                            dump($value);
                            if ($invoices[0][$idx]->ItemID == $value->item_id) {
                                $invoices[0][$idx]->SellingPrice = $value->price;
                                $invoices[0][$idx]->SellingTotal = $value->total;
                            }
                        }
                    }

                    // ********************************************
                    // COLLECT DATA DEPOSIT/ NON DEPOSIT SUMMARY
                    // ********************************************
                    $nondeposit = $deposit_data;
                    $vatdeposit = $deposit_data;
                    $alldeposit = $deposit_data;
                    $nondeposit_items = 0;
                    $vatdeposit_items = 0;
                    foreach ($items_price as $idx => $items_satang) {
                        foreach ($itemtoSatang as $key => $value) {
                            if ($items_satang->item_id == $value['item_id']) {
//                                dump($value);
                                $price_exc_vat  = $value['price'];
                                $quantity       = ($value['quantity']);
                                $price_inc_vat  = ($items_satang->price);
                                $price_dis      = ($invoices[0][$idx]->Simple_Discount);

                                if (!isset($invoices[0][$idx]->VatRate) || $invoices[0][$idx]->VatRate == 0 || $invoices[0][$idx]->VatRate == '') {
                                    $nondeposit['VAT_CODE'] = Config::get('invoice.vat_code_1');
                                    $nondeposit['AMT_EXCVAT'] += ($price_exc_vat * $quantity);
                                    $nondeposit['AMT_VAT'] = 0;
                                    $nondeposit['AMT_NORMAL'] += ($price_inc_vat * $quantity);
                                    $nondeposit['AMT_DISCOUNT'] += $price_dis;
                                    $nondeposit['AMT_PRICE'] += (($price_inc_vat) * $quantity) - $price_dis;
                                    $nondeposit['AMT_COMPLEX'] = $complex_nonvat_total;
                                    $nondeposit_items += $quantity;

                                } else {
                                    $vatdeposit['VAT_CODE'] = Config::get('invoice.vat_code_2');
                                    $vatdeposit['AMT_EXCVAT'] += ($price_exc_vat * $quantity);
//                                    $vatdeposit['AMT_VAT'] = $vat_grand_total;
                                    $vatdeposit['AMT_VAT'] = 0;
                                    $vatdeposit['AMT_NORMAL'] += ($price_inc_vat * $quantity);
                                    $vatdeposit['AMT_DISCOUNT'] += $price_dis;
                                    $vatdeposit['AMT_PRICE'] += (($price_inc_vat) * $quantity) - $price_dis;
                                    $vatdeposit['AMT_COMPLEX'] = $complex_vat_total;
                                    $vatdeposit_items += $quantity;

                                }
                                $alldeposit['VAT_CODE'] = 0;
                                $alldeposit['AMT_EXCVAT'] += ($price_exc_vat * $quantity);
//                                $alldeposit['AMT_VAT'] = $vat_grand_total;
                                $alldeposit['AMT_VAT'] = 0;
                                $alldeposit['AMT_NORMAL'] += ($price_inc_vat * $quantity);
                                $alldeposit['AMT_DISCOUNT'] = $price_dis;
                                $alldeposit['AMT_PRICE'] += (($price_inc_vat) * $quantity) - $price_dis;
                                $alldeposit['AMT_COMPLEX'] = $complex_discount_total;
                            }
                        }
                    }

                    // ********************************************
                    //CALCULATE VAT ITEM FROM TOTAL PRICE
                    // ********************************************
                    $vat_grand_total = ROUND(($vatdeposit['AMT_PRICE']-$vatdeposit['AMT_COMPLEX'])-(($vatdeposit['AMT_PRICE']-$vatdeposit['AMT_COMPLEX'])/(1+((Config::get('invoice.vat_rate'))/100))),2);
                    $vatdeposit['AMT_VAT'] = $vat_grand_total;
                    $alldeposit['AMT_VAT'] = $vat_grand_total;


                    $deposit_summary['Deposit-Vat'] = $vatdeposit;
                    $deposit_summary['Deposit-NonVat'] = $nondeposit;
                    $deposit_summary['Deposit'] = $alldeposit;
//                    dump('$deposit_summary');
//                    dump($deposit_summary);
                    $deposit_summary['Deposit-Vat']['AMT_EXCVAT'] = $deposit_summary['Deposit-Vat']['AMT_PRICE'] - $deposit_summary['Deposit-Vat']['AMT_VAT'];
                    $deposit_summary['Deposit-NonVat']['AMT_EXCVAT'] = $deposit_summary['Deposit-NonVat']['AMT_PRICE'];
                    $deposit_summary['Deposit']['AMT_EXCVAT'] = $deposit_summary['Deposit']['AMT_PRICE'] - $deposit_summary['Deposit']['AMT_VAT'];

                    if ($invoices[0][0]->InvoiceType == 'INFO' || $invoices[0][0]->InvoiceType == 'CREDIT_MEMO' || $invoices[0][0]->InvoiceType == 'RETURN' || $invoices[0][0]->InvoiceType == 'Return Invoiced') {
                        $deposit_summary['Deposit-Vat']['AMT_EXCVAT'] = $deposit_summary['Deposit-Vat']['AMT_EXCVAT'] - $deposit_summary['Deposit-Vat']['AMT_COMPLEX'];
                        $deposit_summary['Deposit-Vat']['AMT_NORMAL'] = $deposit_summary['Deposit-Vat']['AMT_NORMAL'] - $deposit_summary['Deposit-Vat']['AMT_COMPLEX'];
                        $deposit_summary['Deposit-Vat']['AMT_PRICE'] = $deposit_summary['Deposit-Vat']['AMT_PRICE'] - $deposit_summary['Deposit-Vat']['AMT_COMPLEX'];

                        $deposit_summary['Deposit-NonVat']['AMT_EXCVAT'] = $deposit_summary['Deposit-NonVat']['AMT_EXCVAT'] - $deposit_summary['Deposit-NonVat']['AMT_COMPLEX'];
                        $deposit_summary['Deposit-NonVat']['AMT_NORMAL'] = $deposit_summary['Deposit-NonVat']['AMT_NORMAL'] - $deposit_summary['Deposit-NonVat']['AMT_COMPLEX'];
                        $deposit_summary['Deposit-NonVat']['AMT_PRICE'] = $deposit_summary['Deposit-NonVat']['AMT_PRICE'] - $deposit_summary['Deposit-NonVat']['AMT_COMPLEX'];

                        $deposit_summary['Deposit']['AMT_EXCVAT'] = $deposit_summary['Deposit']['AMT_EXCVAT'] - $deposit_summary['Deposit']['AMT_COMPLEX'];
                        $deposit_summary['Deposit']['AMT_NORMAL'] = $deposit_summary['Deposit']['AMT_NORMAL'] - $deposit_summary['Deposit']['AMT_COMPLEX'];
                        $deposit_summary['Deposit']['AMT_PRICE'] = $deposit_summary['Deposit']['AMT_PRICE'] - $deposit_summary['Deposit']['AMT_COMPLEX'];
                    }

//                    $vat_grand_total = ROUND(247560-(247560/(1+(7 /100))),2);

//                    dump('$deposit_summary');
//                    dump($deposit_summary);

                    $numberThai = new NumberThai();
                    // ********************************************
                    // NORMAL TAX INVOICE DISPLAY GRAND_TOTAL = 0
                    // ********************************************
                    if ($invoices[0][0]->InvoiceType == 'SHIPMENT') {
                        $invoices[0][0]->TotalStringThai = $numberThai->convertBaht(0);
                    } else {
                        $invoices[0][0]->TotalStringThai = $numberThai->convertBaht(number_format($deposit_summary['Deposit']['AMT_PRICE'], 2, '.', ''));
                    }

                    // ********************************************
                    // GET STORE INFORMATION FROM API
                    // ********************************************
                    $store_info = $this->getAllStores($invoices[0][0]->ShipNode);

                    $store_address = $this->getAllStoresAddress($store_info[0]->id);

                    // ********************************************
                    // SHOULD WE GENERATE SHORT OR LONG FORM
                    // ********************************************
                    $useLongForm = $this->shouldUseLongForm($order);

                    // ********************************************
                    // GET INVOICE NAME
                    // ********************************************
                    $invoiceTypeName = $this->getInvoiceTypeName($invoices[0][0]->InvoiceType, $order->tax_payer_id, $useLongForm);

                    // ********************************************
                    // CALCULATE TOTAL PAGE OF INVOICE DISPLAY
                    // ********************************************
                    $totalItem = count($invoices[0]);
                    $total_complex_discountItem = count($complex_summary);

                    $totalDetail = $this->calculateTotalPage($invoices, $deposit_summary, $complex_summary, $totalItem, $complex_discount_total, $total_complex_discountItem, $vatdeposit_items, $nondeposit_items);
//                   dump($totalDetail); die;
//                    dump($totalLine);
//                    dump($complex_summary);
//                    dump($invoices);

                    // ********************************************
                    // PRINT DATE (REPRINT)
                    // ********************************************
                    $print_date = (new DateTime())->format('d/m/Y');

                    // ********************************************
                    // CALCULATE SHOPNAME , SEARCH CRITERIA 2 TO DISPLAY INVOICE CUSTOMER NAME
                    // ********************************************
                    $cus_name = isset($order->search_criteria2) ? $order->search_criteria2 : '';
                    if ($cus_name != '') {
                        if (mb_strlen($cus_name,"UTF-8") > Config::get('invoice.address_length')) {
                            $cus_name_1 = mb_substr($cus_name, 0, Config::get('invoice.address_length'), "UTF-8");
                            $cus_name_2 = mb_substr($cus_name, Config::get('invoice.address_length'), mb_strlen($cus_name,"UTF-8"), "UTF-8");
                        } else {
                            $cus_name_1 = $cus_name;
                            $cus_name_2 = '';
                        }
                    } else {
                        $cus_name_1 = '';
                        $cus_name_2 = '';
                    }

                    // ********************************************
                    // CALCULATE ADDRESS1 , ADDRESS 2 TO DISPLAY INVOICE LINE ADDRESS
                    // ********************************************
                    //$address_1 = $order->additionalAddress->addressLine1;
                    //$address_2 = $order->additionalAddress->addressLine2;
                    //$address_2 = '';
                    //$address_1_2 = $order->additionalAddress->addressLine1 . ' ' . $order->additionalAddress->addressLine2;
                    $address_1_2 = isset($order->additionalAddress->addressLine1) ? $order->additionalAddress->addressLine1 : '';
                    if ($address_1_2 != '') {
                        if (mb_strlen($address_1_2,"UTF-8") > Config::get('invoice.address_length')) {
                            $address_1 = mb_substr($address_1_2, 0, Config::get('invoice.address_length'), "UTF-8");
                            $address_2 = mb_substr($address_1_2, Config::get('invoice.address_length'), mb_strlen($address_1_2,"UTF-8"), "UTF-8");
                        } else {
                            $address_1 = $address_1_2;
                            $address_2 = '';
                        }
                    } else {
                        $address_1 = '';
                        $address_2 = '';
                    }

                    // ********************************************
                    // CALCULATE ADDRESS1 , ADDRESS 2 TO DISPLAY INVOICE LINE ADDRESS
                    // ********************************************
                    if ($invoices[0][0]->InvoiceType == 'SHIPMENT') {
                        $log_subtotal = '0.00';
                    } else {
                        $log_subtotal = $deposit_summary['Deposit']['AMT_PRICE'] - ($vat_grand_total);
                    }
                    if ($invoices[0][0]->InvoiceType == 'CREDIT_MEMO' || $invoices[0][0]->InvoiceType == 'RETURN' || $invoices[0][0]->InvoiceType == 'Return Invoiced') {
                        $log_vat = '';
                    } elseif ($invoices[0][0]->InvoiceType == 'SHIPMENT') {
                        $log_vat = '0.00';
                    } elseif ($invoices[0][0]->InvoiceType == 'INFO') {
                        $log_vat = $vat_grand_total;
                    }
                    if ($invoices[0][0]->InvoiceType == 'SHIPMENT') {
                        $net_amount = '0.00';
                    } else {
                        $net_amount = $deposit_summary['Deposit']['AMT_PRICE'];
                    }
  
                    // get coupon discount
                    $coupon_discount = $this->getCouponDiscount($orderNo);

                    // get form template for print
                    $data = [
                        'company_name' => Config::get('invoice.company_name'),
                        'head_office' => Config::get('invoice.head_office'),
                        'tel' => Config::get('invoice.tel'),
                        'fax' => Config::get('invoice.fax'),
                        'makro_tax_id' => Config::get('invoice.makro_tax_id'),
                        'makro_record_no' => Config::get('invoice.makro_record_no'),
                        'logo_path' => Config::get('invoice.logo_path'),
                        'invoices' => $invoices,
                        'order' => $order,
                        'order_number' => $orderNo,
                        'useLongForm' => $useLongForm,
                        'invoiceTypeName' => $invoiceTypeName,
                        'store_info' => $store_info,
                        'store_address' => $store_address,
                        'deposit_summary' => $deposit_summary,
                        'complex_summary' => $complex_summary,
                        'complex_discount_total' => $complex_discount_total,
                        'vat_grand_total' => $vat_grand_total,
                        'totalItem' => $totalItem,
                        'totalDetail' => $totalDetail,
                        'total_complex_discountItem' => $total_complex_discountItem,
                        'nondeposit_items' => $nondeposit_items,
                        'vatdeposit_items' => $vatdeposit_items,
                        'print_date' => $print_date,
                        'cus_name_1' => $cus_name_1,
                        'cus_name_2' => $cus_name_2,
                        'address_1' => $address_1,
                        'address_2' => $address_2,
                        'full_print_date' => $this->full_thai_printDate($print_date),
                        'coupon_discount' => $coupon_discount
                    ];
                    $formTemplate = View::make('epos.invoice.template.invoice_template', $data)->render();

//                    if ($invoices[0][0]->ExtnNewInvoiceNumber != '') {
//                        dump($invoice_number);
//                        $invoice_number = $invoices[0][0]->ExtnNewInvoiceNumber;
//                    }
                    return view('epos.invoice.preview.index', [
                        'invoice_number' => $invoice_number,
                        'replace_invoice_number' => $invoices[0][0]->ExtnNewInvoiceNumber,
                        'order_number' => $orderNo,
                        're_print' => $invoices[0][0]->ExtnRunningNumber,
                        'payment_type' => $invoices[0][0]->SearchCriteria1,
                        'invoice_type' => $invoices[0][0]->InvoiceType,
                        'invoice_date' => $invoices[0][0]->CreateDate,
                        'subtotal'     => $log_subtotal,
                        'vat'          => $log_vat,
                        'net_amount'   => $net_amount,
                        'store_id'     => $store_info[0]->makro_store_id,
                        'order_number' => $orderNo,
                        'order_date'   => $invoices[0][0]->OrderDate,
                        'payment_type' => $invoices[0][0]->SearchCriteria1,
                        'shop_name'         => isset($order->search_criteria2) ? $order->search_criteria2 : '',
                        'makro_member_card' => isset($order->makro_member_card) ? $order->makro_member_card : '',
                        'tax_id'            => isset($order->tax_payer_id) ? $order->tax_payer_id : '',
                        'branch_id'         => isset($order->branch) ? $order->branch : '',
                        'address_line1'     => isset($order->additionalAddress->addressLine1) ? $order->additionalAddress->addressLine1 : '',
                        //'address_line2'     => isset($order->additionalAddress->addressLine2) ? $order->additionalAddress->addressLine2 : '',
                        'mobile_phone'      => '',
                        'provinces'         => isset($order->additionalAddress->state) ? $order->additionalAddress->state : '',
                        'districts'         => isset($order->additionalAddress->city) ? $order->additionalAddress->city  : '',
                        'sub_districts'     => isset($order->additionalAddress->addressLine4) ? $order->additionalAddress->addressLine4 : '',
                        'zip_code'          => isset($order->additionalAddress->zipCode) ? $order->additionalAddress->zipCode : '',
                        'form_template' => $formTemplate
                    ]);

                } else {

//                    return redirect()->back()->withErrors('Order not found, please try again')->withInput();
                    return redirect()->back()->with('msg', 'Order not found, please try again')->withInput();
                }

            } else {
//                return redirect()->back()->withErrors('Internal wrong, please try again')->withInput();
                return redirect()->back()->with('msg', 'Internal wrong, please try again')->withInput();
            }
        }
    }

=======
    
>>>>>>> develop
    public function full_thai_printDate($print_date)
    {
        if ($print_date != '') {
            $d = explode("/", $print_date);
            if ($d[1] == "01") { $thai_month = 'มกราคม';}
            if ($d[1] == "02") { $thai_month = 'กุมภาพันธ์';}
            if ($d[1] == "03") { $thai_month = 'มีนาคม';}
            if ($d[1] == "04") { $thai_month = 'เมษายน';}
            if ($d[1] == "05") { $thai_month = 'พฤษภาคม';}
            if ($d[1] == "06") { $thai_month = 'มิถุนายน';}
            if ($d[1] == "07") { $thai_month = 'กรกฎาคม';}
            if ($d[1] == "08") { $thai_month = 'สิงหาคม';}
            if ($d[1] == "09") { $thai_month = 'กันยายน';}
            if ($d[1] == "10") { $thai_month = 'ตุลาคม';}
            if ($d[1] == "11") { $thai_month = 'พฤศจิกายน';}
            if ($d[1] == "12") { $thai_month = 'ธันวาคม';}
            $thai_year = $d[2] + 543;

            return $d[0] . ' ' . $thai_month . ' ' . $thai_year;
        } else {
            return '';
        }
    }

    public function calculateTotalPage($invoices, $deposit_summary, $complex_summary, $totalItem, $complex_discount_total, $total_complex_discountItem, $vatdeposit_items, $nondeposit_items) {
        $totalLine = false;
        $linePerPage = 10;
        $rowData = [];

        if ($invoices[0][0]->InvoiceType == 'SHIPMENT') {
            $total = $totalItem + (($complex_discount_total > 0) ? ($total_complex_discountItem + 2) : 0);
            // Line for Vat Code Summary
            $total += 4;
        } elseif ($invoices[0][0]->InvoiceType == 'INFO') {
            $total = 2;
            // Line for Vat Code Summary
            $total += 4;
        } elseif ($invoices[0][0]->InvoiceType == 'CREDIT_MEMO') {
            $total = 2;
            // Line for Vat Code Summary
            $total += 4;
        } elseif ($invoices[0][0]->InvoiceType == 'RETURN' || $invoices[0][0]->InvoiceType == 'Return Invoiced') {
            $total = $totalItem + (($complex_discount_total > 0) ? ($total_complex_discountItem + 2) : 0);
            // Line for Vat Code Summary
            $total += 4;
        }

        $totalLine['total'] = $total;
        $totalLine['page'] = (int)ceil(($total)/($linePerPage));
        $totalLine['fill'] = (int)($linePerPage * $totalLine['page']) - $totalLine['total'];
        $totalLine['linePerPage'] = $linePerPage;

        if ($invoices[0][0]->InvoiceType == 'SHIPMENT') {

            $line = 0;
            $idx_item = 1;
            foreach ($invoices[0] as $a => $b) {
                $totalLine['line'][$line] = $this->get_itemLine($line, $linePerPage, $b, $a, $deposit_summary, $idx_item);
                $line += 1;
                $idx_item += 1;
            }

            // Fill line to Full Display Page
            for ($fill = 0; $fill < $totalLine['fill']; $fill++) {
                $totalLine['line'][$line] = $this->get_fillLine($line, $linePerPage, 'ITEM');
                $line += 1;
            }

            if ($complex_discount_total != 0) {
                $complex_line = 0;
                foreach ($complex_summary as $a => $b) {
                    if ($complex_line == 0) {
                        $totalLine['line'][$line] = $this->get_complex_head($line, $linePerPage);
                        $line += 1;
                    }

                    $totalLine['line'][$line] = $this->get_complex($line, $linePerPage, $complex_line, $b);
                    $line += 1;
                    $complex_line += 1;

                    if ($total_complex_discountItem == $complex_line) {
                        $totalLine['line'][$line] = $this->get_complex_footer($line, $linePerPage, $deposit_summary);
                        $line += 1;
                    }
                }
            }

            $summary_line = 0;
            foreach ($deposit_summary as $a => $b) {
                if ($summary_line == 0) {
                    $totalLine['line'][$line] = $this->get_summary_head($line, $linePerPage);;
                    $line += 1;
                    $summary_line += 1;
                }
                $totalLine['line'][$line] = $this->get_summary($line, $linePerPage, $a, $b, $vatdeposit_items, $nondeposit_items, $deposit_summary, $invoices[0][0]->InvoiceType);
                $line += 1;
                $summary_line += 1;
            }

        }
        elseif ($invoices[0][0]->InvoiceType == 'INFO') {

            $line = 0;

            $idx_item = 1;
            foreach ($invoices[0] as $a => $b) {
                $totalLine['line'][$line] = $this->get_itemLine($line, $linePerPage, $b, $a, $deposit_summary, $idx_item);
                $idx_item += 1;
                $line += 1;
            }

            if ($deposit_summary['Deposit-Vat']['AMT_PRICE'] != 0) {
                $totalLine['line'][$line] = $this->get_deposit($line, $linePerPage, $deposit_summary);
                $line += 1;
            }
            if ($deposit_summary['Deposit-NonVat']['AMT_PRICE'] != 0) {
                $totalLine['line'][$line] = $this->get_nondeposit($line, $linePerPage, $deposit_summary);
                $line += 1;
                if ($deposit_summary['Deposit-Vat']['AMT_PRICE'] == 0) {
                    $totalLine['line'][$line] = $this->get_fillLine($line, $linePerPage, 'INFO');
                    $line += 1;
                }
            } else {
                $totalLine['line'][$line] = $this->get_fillLine($line, $linePerPage, 'INFO');
                $line += 1;
            }

            // Fill line to Full Display Page
            for ($fill = 0; $fill < $totalLine['fill']; $fill++) {
                $totalLine['line'][$line] = $this->get_fillLine($line, $linePerPage, 'ITEM');
                $line += 1;
            }

            $summary_line = 0;
            foreach ($deposit_summary as $a => $b) {
                if ($summary_line == 0) {
                    $totalLine['line'][$line] = $this->get_summary_head($line, $linePerPage);
                    $line += 1;
                    $summary_line += 1;
                }
                $totalLine['line'][$line] = $this->get_summary($line, $linePerPage, $a, $b, 1, 1, $deposit_summary, $invoices[0][0]->InvoiceType);
                $line += 1;
                $summary_line += 1;
            }

        }
        elseif ($invoices[0][0]->InvoiceType == 'CREDIT_MEMO') {

            $line = 0;

            $idx_item = 1;
            foreach ($invoices[0] as $a => $b) {
                $totalLine['line'][$line] = $this->get_itemLine($line, $linePerPage, $b, $a, $deposit_summary, $idx_item);
                $idx_item += 1;
                $line += 1;
            }
            
            if ($deposit_summary['Deposit-Vat']['AMT_PRICE'] != 0) {

                $totalLine['line'][$line] = $this->get_deposit($line, $linePerPage, $deposit_summary);
                $line += 1;
            }
            if ($deposit_summary['Deposit-NonVat']['AMT_PRICE'] != 0) {
                $totalLine['line'][$line] = $this->get_nondeposit($line, $linePerPage, $deposit_summary);
                $line += 1;
                if ($deposit_summary['Deposit-Vat']['AMT_PRICE'] == 0) {
                    $totalLine['line'][$line] = $this->get_fillLine($line, $linePerPage, 'INFO');
                    $line += 1;
                }
            } else {
                $totalLine['line'][$line] = $this->get_fillLine($line, $linePerPage, 'INFO');
                $line += 1;
            }

            // Fill line to Full Display Page
            for ($fill = 0; $fill < $totalLine['fill']; $fill++) {
                $totalLine['line'][$line] = $this->get_fillLine($line, $linePerPage, 'ITEM');
                $line += 1;
            }

            $summary_line = 0;
            foreach ($deposit_summary as $a => $b) {
                if ($summary_line == 0) {
                    $totalLine['line'][$line] = $this->get_summary_head($line, $linePerPage);
                    $line += 1;
                    $summary_line += 1;
                }
                $totalLine['line'][$line] = $this->get_summary($line, $linePerPage, $a, $b, 1, 1, $deposit_summary, $invoices[0][0]->InvoiceType);
                $line += 1;
                $summary_line += 1;
            }

        }
        elseif ($invoices[0][0]->InvoiceType == 'RETURN' || $invoices[0][0]->InvoiceType == 'Return Invoiced') {
            $line = 0;
            $idx_item = 1;
            foreach ($invoices[0] as $a => $b) {
                $totalLine['line'][$line] = $this->get_itemLine($line, $linePerPage, $b, $a, $deposit_summary, $idx_item);
                $line += 1;
                $idx_item += 1;
            }

            // Fill line to Full Display Page
            for ($fill = 0; $fill < $totalLine['fill']; $fill++) {
                $totalLine['line'][$line] = $this->get_fillLine($line, $linePerPage, 'ITEM');
                $line += 1;
            }

            if ($complex_discount_total != 0) {
                $complex_line = 0;
                foreach ($complex_summary as $a => $b) {
                    if ($complex_line == 0) {
                        $totalLine['line'][$line] = $this->get_complex_head($line, $linePerPage);
                        $line += 1;
                    }

                    $totalLine['line'][$line] = $this->get_complex($line, $linePerPage, $complex_line, $b);
                    $line += 1;
                    $complex_line += 1;

                    if ($total_complex_discountItem == $complex_line) {
                        $totalLine['line'][$line] = $this->get_complex_footer($line, $linePerPage, $deposit_summary);
                        $line += 1;
                    }
                }
            }

            $summary_line = 0;
            foreach ($deposit_summary as $a => $b) {
                if ($summary_line == 0) {
                    $totalLine['line'][$line] = $this->get_summary_head($line, $linePerPage);;
                    $line += 1;
                    $summary_line += 1;
                }
                $totalLine['line'][$line] = $this->get_summary($line, $linePerPage, $a, $b, $vatdeposit_items, $nondeposit_items, $deposit_summary, $invoices[0][0]->InvoiceType);
                $line += 1;
                $summary_line += 1;
            }
        }

        return $totalLine;
    }

    public function get_itemLine($line, $linePerPage, $invoice, $a, $deposit_summary, $idx_item) {

        $rowData['Page'] = (int)ceil(($line + 1) / $linePerPage);
        $rowData['Items'] = isset($invoice->PrimeLineNo) ? $idx_item : '&nbsp;';
        $rowData['ID'] = isset($invoice->ItemID) ? $invoice->ItemID : '&nbsp;';
        $rowData['Name'] = isset($invoice->ItemName) ? $invoice->ItemName : '&nbsp;';
        $rowData['Quantity'] = isset($invoice->Quantity) ? number_format($invoice->Quantity, 0) : '&nbsp;';
        $rowData['Unit'] = isset($invoice->UnitOfMeasure) ? $invoice->UnitOfMeasure : '&nbsp;';
        $rowData['SellPrice'] = isset($invoice->SellingPrice) ? number_format($invoice->SellingPrice - $invoice->Simple_Discount_PerUnit, 2) : '&nbsp;';
//        $rowData['SellPrice'] = isset($invoice->SellingPrice) ? number_format($invoice->SellingPrice, 2) : '&nbsp;';
        if (isset($invoice->VatRate) && $invoice->VatRate == 0) {
            $rowData['VATCode'] = $deposit_summary['Deposit-NonVat']['VAT_CODE'];
        } elseif (isset($invoice->VatRate) && $invoice->VatRate > 0) {
            $rowData['VATCode'] = $deposit_summary['Deposit-Vat']['VAT_CODE'];
        } else {
            $rowData['VATCode'] = '&nbsp;';
        }
        $rowData['TotalPrice'] = isset($invoice->Quantity) ? number_format((($invoice->Quantity) * ($invoice->SellingPrice) - $invoice->Simple_Discount), 2) : '';
        $rowData['Type'] = 'ITEM';
//        dd($rowData);
        return $rowData;
    }

    public function get_deposit($line, $linePerPage, $deposit_summary) {
        $rowData['Page'] = (int)ceil(($line + 1) / $linePerPage);
        $rowData['Items'] = '1';
        $rowData['ID'] = '222221';
        $rowData['Name'] = 'Deposit - Vat';
        $rowData['Quantity'] = '1';
        $rowData['Unit'] = 'EACH';
        $rowData['SellPrice'] = number_format($deposit_summary['Deposit-Vat']['AMT_PRICE'], 2);
        $rowData['VATCode'] = $deposit_summary['Deposit-Vat']['VAT_CODE'];
        $rowData['TotalPrice'] = number_format($deposit_summary['Deposit-Vat']['AMT_PRICE'], 2);
        $rowData['Type'] = 'INFO';
        return $rowData;
    }

    public function get_nondeposit($line, $linePerPage, $deposit_summary) {
        $rowData['Page'] = (int)ceil(($line + 1) / $linePerPage);
        if ($deposit_summary['Deposit-Vat']['AMT_PRICE'] != 0) {
            $rowData['Items'] = '2';
        } else {
            $rowData['Items'] = '1';
        }
        $rowData['ID'] = '333333';
        $rowData['Name'] = 'Deposit - Non Vat';
        $rowData['Quantity'] = '1';
        $rowData['Unit'] = 'EACH';
        $rowData['SellPrice'] = number_format($deposit_summary['Deposit-NonVat']['AMT_PRICE'], 2);
        $rowData['VATCode'] = $deposit_summary['Deposit-NonVat']['VAT_CODE'];
        $rowData['TotalPrice'] = number_format($deposit_summary['Deposit-NonVat']['AMT_PRICE'], 2);
        $rowData['Type'] = 'INFO';
        return $rowData;

    }

    public function get_complex_head($line, $linePerPage) {
        $rowData['Page'] = (int)ceil(($line + 1) / $linePerPage);
        $rowData['Items'] = 'Discount Condition';
        $rowData['ID'] = '&nbsp;';
        $rowData['Name'] = '&nbsp;';
        $rowData['Quantity'] = '&nbsp;';
        $rowData['Unit'] = '&nbsp;';
        $rowData['SellPrice'] = '&nbsp;';
        $rowData['VATCode'] = '&nbsp;';
        $rowData['TotalPrice'] = '&nbsp;';
        $rowData['Type'] = 'COMPLEX';
        return $rowData;
    }

    public function get_complex($line, $linePerPage, $complex_line, $b) {
        $rowData['Page'] = (int)ceil(($line + 1) / $linePerPage);
        $rowData['Items'] = ($complex_line + 1);
        $rowData['ID'] = $b['COMPLEX_NAME'];
        $rowData['Name'] = '&nbsp;';
        $rowData['Quantity'] = '&nbsp;';
        $rowData['Unit'] = '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'.number_format($b['DISCOUNT'], 2);
        $rowData['SellPrice'] = '&nbsp;';
        $rowData['VATCode'] = '&nbsp;';
        $rowData['TotalPrice'] = '&nbsp;';
        $rowData['Type'] = 'COMPLEX';
        return $rowData;
    }

    public function get_complex_footer($line, $linePerPage, $deposit_summary) {
        $rowData['Page'] = (int)ceil(($line + 1) / $linePerPage);
        $rowData['Items'] = '&nbsp;';
        $rowData['ID'] = '&nbsp;รวมส่วนลด';
        $rowData['Name'] = '&nbsp;';
        $rowData['Quantity'] = '&nbsp;';
        $rowData['Unit'] = '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'.number_format($deposit_summary['Deposit']['AMT_COMPLEX'], 2);
        $rowData['SellPrice'] = '&nbsp;';
        $rowData['VATCode'] = '&nbsp;';
        $rowData['TotalPrice'] = '&nbsp;';
        $rowData['Type'] = 'COMPLEX';
        return $rowData;
    }

    public function get_fillLine($line, $linePerPage, $type) {
        $rowData['Page'] = (int)ceil(($line + 1) / $linePerPage);
        $rowData['Items'] = '&nbsp;';
        $rowData['ID'] = '&nbsp;';
        $rowData['Name'] = '&nbsp;';
        $rowData['Quantity'] = '&nbsp;';
        $rowData['Unit'] = '&nbsp;';
        $rowData['SellPrice'] = '&nbsp;';
        $rowData['VATCode'] = '&nbsp;';
        $rowData['TotalPrice'] = '&nbsp;';
        $rowData['Type'] = $type;
        return $rowData;
    }

    public function get_summary($line, $linePerPage, $a, $b, $vatdeposit_items, $nondeposit_items, $deposit_summary, $inv_type) {
        $rowData = false;
        if ($a == 'Deposit-NonVat' && $b['AMT_PRICE'] != 0) {
            $rowData['Page'] = (int)ceil(($line + 1) / $linePerPage);
            $rowData['Items'] = '&nbsp;';
            if ($nondeposit_items == 0) {
                $rowData['ID'] = '&nbsp;';
            } else {
                $rowData['ID'] = $nondeposit_items;
            }
            $rowData['Name'] = $b['VAT_CODE'];
            $rowData['Quantity'] = number_format($b['AMT_EXCVAT'], 2);
            $rowData['Unit'] = '0.00';
            $rowData['SellPrice'] = number_format($b['AMT_PRICE'], 2);
            $rowData['VATCode'] = '&nbsp;';
            $rowData['TotalPrice'] = '&nbsp;';
            $rowData['Type'] = 'SUMMARY';
        }
        elseif ($a == 'Deposit-NonVat' && $b['AMT_PRICE'] == 0) {
                $rowData['Page'] = (int)ceil(($line + 1) / $linePerPage);
                $rowData['Items'] = '&nbsp;';
                $rowData['ID'] = '0';
                $rowData['Name'] = Config::get('invoice.vat_code_1');
                $rowData['Quantity'] = '0.00';
                $rowData['Unit'] = '0.00';
                $rowData['SellPrice'] = '0.00';
                $rowData['VATCode'] = '&nbsp;';
                $rowData['TotalPrice'] = '&nbsp;';
                $rowData['Type'] = 'SUMMARY';
        }

        if ($a == 'Deposit-Vat' && $b['AMT_PRICE'] != 0) {
            $rowData['Page'] = (int)ceil(($line + 1) / $linePerPage);
            $rowData['Items'] = '&nbsp;';
            if ($vatdeposit_items == 0) {
                $rowData['ID'] = '&nbsp;';
            } else {
                $rowData['ID'] = $vatdeposit_items;
            }
            $rowData['Name'] = $b['VAT_CODE'];
            $rowData['Quantity'] = number_format($b['AMT_EXCVAT'], 2);
            $rowData['Unit'] = number_format($b['AMT_VAT'], 2);
            $rowData['SellPrice'] = number_format($b['AMT_PRICE'], 2);
            $rowData['VATCode'] = '&nbsp;';
            $rowData['TotalPrice'] = '&nbsp;';
            $rowData['Type'] = 'SUMMARY';
        }
        elseif ($a == 'Deposit-Vat' && $b['AMT_PRICE'] == 0) {
                $rowData['Page'] = (int)ceil(($line + 1) / $linePerPage);
                $rowData['Items'] = '&nbsp;';
                $rowData['ID'] = '0';
                $rowData['Name'] = Config::get('invoice.vat_code_2');
                $rowData['Quantity'] = '0.00';
                $rowData['Unit'] = '0.00';
                $rowData['SellPrice'] = '0.00';
                $rowData['VATCode'] = '&nbsp;';
                $rowData['TotalPrice'] = '&nbsp;';
                $rowData['Type'] = 'SUMMARY';
        }
        if ($a == 'Deposit' && $b['AMT_PRICE'] != 0) {
            $rowData['Page'] = (int)ceil(($line + 1) / $linePerPage);
            $rowData['Items'] = '&nbsp;';
            $rowData['ID'] = '&nbsp;';
            $rowData['Name'] = 'รวม';
            $rowData['Quantity'] = number_format($b['AMT_EXCVAT'], 2);
            if (($deposit_summary['Deposit-Vat']['AMT_PRICE'] == 0) && $deposit_summary['Deposit-NonVat']['AMT_PRICE'] != 0) {
                $rowData['Unit'] = '0.00';
            } else {
                $rowData['Unit'] = number_format($b['AMT_VAT'], 2);
            }
            $rowData['SellPrice'] = number_format($b['AMT_PRICE'], 2);
            $rowData['VATCode'] = '&nbsp;';
            $rowData['TotalPrice'] = '&nbsp;';
            $rowData['Type'] = 'SUMMARY';
        }

        return $rowData;
    }

    public function get_summary_head($line, $linePerPage) {
        $rowData['Page'] = (int)ceil(($line + 1) / $linePerPage);
        $rowData['Items'] = '&nbsp;';
        $rowData['ID'] = 'จำนวนชิ้น';
        $rowData['Name'] = 'รหัส ภ.พ.';
        $rowData['Quantity'] = 'ราคาสินค้า';
        $rowData['Unit'] = 'ภาษี';
        $rowData['SellPrice'] = 'รวม';
        $rowData['VATCode'] = '&nbsp;';
        $rowData['TotalPrice'] = '&nbsp;';
        $rowData['Type'] = 'SUMMARY_HEAD';
        return $rowData;
    }

    public function get_LastLine($line, $linePerPage) {
        // Final line is Empty line
        $rowData['Page'] = (int)ceil(($line + 1) / $linePerPage);
        $rowData['Items'] = '&nbsp;';
        $rowData['ID'] = '&nbsp;';
        $rowData['Name'] = '&nbsp;';
        $rowData['Quantity'] = '&nbsp;';
        $rowData['Unit'] = '&nbsp;';
        $rowData['SellPrice'] = '&nbsp;';
        $rowData['VATCode'] = '&nbsp;';
        $rowData['TotalPrice'] = '&nbsp;';
        $rowData['Type'] = 'LASTLINE';
        return $rowData;
    }

    public function replace($order_invoice_key, $order_number, $replace_invoice_number, $payment_type, $invoice_type, $store_id) {

        $order = $this->getOrder($order_number);

        if ($order == '404') {
            return redirect()->back()->with('msg', 'Connection error!, please try again')->withInput();

        }
        if (empty($order)) {
            return redirect('/epos/invoice')->withErrors('data not found');
        }

        $customerInfo                = new CustomerInformation();
        $customerInfo->shopName      = isset($order->search_criteria2) ? $order->search_criteria2 : '';
        $customerInfo->branchId      = isset($order->branch) ? $order->branch : '';
        $customerInfo->taxId         = isset($order->data->tax_payer_id) ? $order->data->tax_payer_id : '';
        $customerInfo->phone         = isset($order->additionalAddress->phone) ? $order->additionalAddress->phone : '';
        $customerInfo->addressLine1  = isset($order->additionalAddress->addressLine1) ? $order->additionalAddress->addressLine1 : '';
        $customerInfo->province      = isset($order->additionalAddress->state) ? $order->additionalAddress->state : '';
        $customerInfo->districts     = isset($order->additionalAddress->city) ? $order->additionalAddress->city : '';
        $customerInfo->sub_districts = isset($order->additionalAddress->addressLine4) ? $order->additionalAddress->addressLine4 : '';
        $customerInfo->zipcode       = isset($order->additionalAddress->zipCode) ? $order->additionalAddress->zipCode : '';
        $customerInfo->email         = isset($order->additionalAddress->email) ? $order->additionalAddress->email : '';

        return view('epos.invoice.replace.index', [
            'order_number'           => $order_number,
            'order_invoice_key'      => $order_invoice_key,
            'replace_invoice_number' => $replace_invoice_number,
            'payment_type'           => $payment_type,
            'invoice_type'           => $invoice_type,
            'store_id'               => $store_id,
            'customerInfo'           => $customerInfo
        ]);
    }

    public function saveReplace(PrintCounterRepository $printcounterRepository, ReplaceInvoiceRepository $replaceInvoiceRepository, InvoiceReplaceRequest $formRequest) {

        $order_invoice_key           = $formRequest->get('order_invoice_key', '');
        $invoice_number              = $formRequest->get('invoice_number', '');
        $replace_invoice_number      = $formRequest->get('replace_invoice_number', '');
        $order_number                = $formRequest->get('order_number', '');
        $payment_type                = $formRequest->get('payment_type', '');
        $invoice_type                = $formRequest->get('invoice_type', '');
        $store_id                    = $formRequest->get('store_id', '');

        $customerInfo                = new CustomerInformation();
        $customerInfo->shopName      = $formRequest->get('shop_name', '');
        $customerInfo->taxId         = $formRequest->get('tax_id', '');
        $customerInfo->branchId      = $formRequest->get('branch_id', '');
        // $customerInfo->phone      = $formRequest->get('phone', '');
        $customerInfo->addressLine1  = $formRequest->get('address_line_1', '');
        $customerInfo->province      = $formRequest->get('province_text', '');
        $customerInfo->districts     = $formRequest->get('districts_text', '');
        $customerInfo->sub_districts = $formRequest->get('sub_districts_text', '');
        $customerInfo->zipcode       = $formRequest->get('zipcode', '');
        $customerInfo->email         = $formRequest->get('email', '');

        if ($order_invoice_key != '') {
            $invoices = $this->getInvoicesDetail($order_invoice_key);
        } else {
            $invoices = '500';
        }

        $invoice_number = isset($invoices[0][0]->InvoiceNo) ? $invoices[0][0]->InvoiceNo : '';

        $userId = \Session::get('userId');
        $userData = $this->usersRepository->getUsers(['id' => $userId]);
        $username = isset($userData['data'][0]['username']) ? $userData['data'][0]['username'] : '';
        if ($replace_invoice_number != '0') {
            $old_invoice = $replace_invoice_number;
        } else {
            $old_invoice = $invoice_number;
        }

        // Check Replace Type
        $replace_type = 'long_to_long';
        if (empty($formRequest->get('old_tax_id')) || $formRequest->get('old_tax_id') == '-') {
            if (!empty($customerInfo->taxId)) {
                $replace_type = 'short_to_long';
            }
        }

        $amount_detail = $this->getAmountDetail($order_number);

	    $param = array(
            'type'              => 'replace',
            'replace_type'      => $replace_type,
            'order_invoice_key' => $order_invoice_key,
            'old_info'          => array(
                'company_name'      => $formRequest->get('old_shop_name', ''),
                'tax_id'            => $formRequest->get('old_tax_id', ''),
                'branch_id'         => $formRequest->get('old_branch_id', ''),
                'address_line1'     => $formRequest->get('old_address_line_1', ''),
                'mobile_phone'      => $formRequest->get('old_phone', ''),
                'provinces'         => $formRequest->get('old_provinces', ''),
                'districts'         => $formRequest->get('old_districts', ''),
                'sub_districts'     => $formRequest->get('old_sub_districts', ''),
                'zip_code'          => $formRequest->get('old_zipcode', ''),
                'issue_date'        => '',
                'settlement_date'   => ''
	        ),
            'new_info'          => array(
                'company_name'      => $customerInfo->shopName,
                'tax_id'            => $customerInfo->taxId,
                'branch_id'         => $customerInfo->branchId,
                'address_line1'     => $customerInfo->addressLine1,
                // 'mobile_phone'      => $customerInfo->phone,
                'provinces'         => $customerInfo->province,
                'districts'         => $customerInfo->districts,
                'sub_districts'     => $customerInfo->sub_districts,
                'zip_code'          => $customerInfo->zipcode,
                'issue_date'        => '',
                'settlement_date'   => ''
            ),
            'invoice_no'        => $invoice_number,
            'old_invoice'       => $old_invoice,
            'new_invoice'       => '',
            'order_number'      => $order_number,
	        'amount_exc_vat'    => round($amount_detail['amountExcVat'],2),
            'amount_inc_vat'    => round($amount_detail['amountIncVat'],2),
            'selling_vat'       => round($amount_detail['sellingVat'],2),
            'issue_date'        => '',
            'settlement_date'   => '',
            'interday'          => false,
            'store_id'          => $store_id,
            'created_at'        => (new DateTime())->format('Y-m-d H:i:s'),
            'created_by'        => $username,
            'status'            => '',
            'message'           => ''
        );

        if ($invoices == '404') {
            $param['status'] = 'Error';
            $param['message'] = 'Connection error!, please try again';

            $logInfo = $this->sendLogInfo($param);

            return redirect()->back()->withErrors('Connection error!, please try again')->withInput();
        } elseif ($invoices == '500') {
            $param['status'] = 'Error';
            $param['message'] = 'Can not get invoice!';

            $logInfo = $this->sendLogInfo($param);
            return redirect()->back()->withErrors('Can not get invoice!')->withInput();
        }

        $param['issue_date'] = convertDateTime($invoices[0][0]->IssueDate, 'd/m/Y', 'Y-m-d');
        $param['settlement_date'] = convertDateTime($invoices[0][0]->ExtnSettlementDate, 'd/m/Y', 'Y-m-d');
        $param['old_info']['issue_date'] = convertDateTime($invoices[0][0]->IssueDate, 'd/m/Y', 'Y-m-d');
        $param['old_info']['settlement_date'] = convertDateTime($invoices[0][0]->ExtnSettlementDate, 'd/m/Y', 'Y-m-d');

        $document_type = '0001';
        if ($invoices[0][0]->InvoiceType == 'RETURN' || $invoices[0][0]->InvoiceType == 'Return Invoiced') {
            $document_type = '0003';
            $order_number = $invoices[0][0]->OrderNo;
        }

        // update Cutomer Information to OMS
        $result = $this->updateInvoice($order_number, $customerInfo, $document_type);

        if ($result == '404') {
            $param['status'] = 'Error';
            $param['message'] = '[Update Invoice] Connection error!, please try again';

            $logInfo = $this->sendLogInfo($param);
            return redirect()->back()->withErrors('[Update Invoice] Connection error!, please try again')->withInput();

        }


        
        if (!$result->error) {

            // Replace Invoice to OMS
            $result = $this->replaceInvoice($order_invoice_key);

            if ($result == '404') {
                $param['status'] = 'Error';
                $param['message'] = '[Replace Invoice] Connection error!, please try again';

                $logInfo = $this->sendLogInfo($param);
                return redirect()->back()->withErrors('[Replace Invoice] Connection error!, please try again')->withInput();

            }

            if (!$result->error) {

                $new_invoices = $this->getInvoicesDetail($order_invoice_key);
                $new_invoice_number = $new_invoices[0][0]->ExtnNewInvoiceNumber;

                $seq = $printcounterRepository->createPrintSequence($new_invoice_number,$order_invoice_key,0);

                //update Person Billing Information to Ms Order
                $updatePersonResult = $this->updatePersonBillingInfo($formRequest->get('order_number', ''), $customerInfo);

                if ($updatePersonResult == '404') {
                    $param['status'] = 'Error';
                    $param['message'] = '[Update Tax Info] Connection error!, please try again';

                    $logInfo = $this->sendLogInfo($param);
                    return redirect()->back()->withErrors('[Update Tax Info] Connection error!, please try again')->withInput();

                }

                if ($updatePersonResult) {

                    $newInvoiceNumber                     = isset($result->new_invoiceNo) ? $result->new_invoiceNo : '';

                    $param['new_invoice']                 = $newInvoiceNumber;
                    $param['status']                      = 'Success';
                    $param['message']                     = '';
                    $param['new_info']['issue_date']      = convertDateTime($result->issueDate, 'd/m/Y', 'Y-m-d');
                    $param['new_info']['settlement_date'] = convertDateTime($result->extnSettlementDate, 'd/m/Y', 'Y-m-d');

                    $logInfo = $this->sendLogInfo($param);

                    // Success
                    Session::flash('messages', [
                        'type' => 'success',
                        'text' => $this->_messages['database']['success'],
                    ]);

                    return redirect()->back();

                } else {
                    $param['status'] = 'Error';
                    $param['message'] = '[Update Tax Info] Internal wrong, please try again';

                    $logInfo = $this->sendLogInfo($param);

                    return redirect()->back()->withErrors('[Update Tax Info] Internal wrong, please try again')->withInput();
                }
            } else {
                $param['status'] = 'Error';
                $param['message'] = '[Replace Invoice] ' . $result->errorMessage;

                $logInfo = $this->sendLogInfo($param);
                return redirect()->back()->withErrors('[Replace Invoice] ' . $result->errorMessage)->withInput();
            }

        } else {
            $param['status'] = 'Error';
            $param['message'] = '[Update Invoice] ' . $result->errorMessage;

            $logInfo = $this->sendLogInfo($param);
            return redirect()->back()->withErrors('[Update Invoice] ' . $result->errorMessage)->withInput();
        }

    }

    public function printCounter(PrintCounterRepository $printcounterRepository, Request $request) {
        $invoiceNumber = $request->get('invoiceNumber', '');
        $customerInvoiceNumber = $request->get('customerInvoiceNumber', '');
        $orderInvoiceKey = $request->get('orderInvoiceKey', '');
        $paymentType = $request->get('paymentType', '');
        $invoiceType = $request->get('invoiceType', '');
        $invoiceDate = $request->get('invoiceDate', '');
        $subtotal = $request->get('subtotal', '');
        $vat = $request->get('vat', '');
        $netamount = $request->get('netamount', '');
        $shipping_fee = $request->get('shipping_fee', 0);
        $store_id = $request->get('store_id', '');
        $order_number = $request->get('order_number', '');
        $order_date = $request->get('order_date', '');
        $payment_type = $request->get('payment_type', '');
        $shop_name = $request->get('shop_name', '');
        $makro_member_card = $request->get('makro_member_card', '');
        $tax_id = $request->get('tax_id', '');
        $branch_id = $request->get('branch_id', '');
        $address_line1 = $request->get('address_line1', '');
        $mobile_phone = $request->get('mobile_phone', '');
        $provinces = $request->get('provinces', '');
        $districts = $request->get('districts', '');
        $sub_districts = $request->get('sub_districts', '');
        $zip_code = $request->get('zip_code', '');


        // From OMS
        // EGM-1166
        //1. An order with payment type=PayAtStore, the Print counter of deposit tax invoice must be set to 1.
        //2. An order with payment type=CC, the Print counter of deposit tax invoice must be set to 0.

        // get print counter
        $printCounter = $printcounterRepository->getNextSequence($customerInvoiceNumber , $orderInvoiceKey , $paymentType, $invoiceType);
        $userId = \Session::get('userId');
        $userData = $this->usersRepository->getUsers(['id' => $userId]);

        $invoices = $this->getInvoicesDetail($orderInvoiceKey);
        $issue_date = $invoices[0][0]->IssueDate;
        $settlement_date = $invoices[0][0]->ExtnSettlementDate;

        $username = isset($userData['data'][0]['username'])? $userData['data'][0]['username'] : '';

        $amount_detail = $this->getAmountDetail($order_number);

        $param = array(
            'type'              => 'print',
            'order_invoice_key' => $orderInvoiceKey,
            //customerInvoiceNumber is current invoice number that display on invoice preview.
            'invoice_no'        => $customerInvoiceNumber,
            //'new_invoice'     => $replaceInvoiceNumber,
            'invoice_date'      => $invoiceDate,
            'issue_date'        => convertDateTime($issue_date, 'd/m/Y', 'Y-m-d'),
            'settlement_date'   => convertDateTime($settlement_date, 'd/m/Y', 'Y-m-d'),
            'running_number'    => $printCounter,
            'subtotal'          => $subtotal,
            'vat'               => $vat,
            'net_amount'        => $netamount,
            'net_amount'        => $netamount,
            'amount_exc_vat'    => round($amount_detail['amountExcVat'],2),
            'amount_inc_vat'    => round($amount_detail['amountIncVat'],2),
            'selling_vat'       => round($amount_detail['sellingVat'],2),
            'reprint_date'      => (new DateTime())->format('Y-m-d H:i:s'),
            'store_id'          => $store_id,
            'tax_info'          => array(
                'shop_name'         => $shop_name,
                'makro_member_card' => $makro_member_card,
                'tax_id'            => $tax_id,
                'branch_id'         => $branch_id,
                'address_line1'     => $address_line1,
                'mobile_phone'      => $mobile_phone,
                'provinces'         => $provinces,
                'districts'         => $districts,
                'sub_districts'     => $sub_districts,
                'zip_code'          => $zip_code
            ),
            'order_number'      => $order_number,
            'order_date'        => $order_date,
            'payment_method'    => $payment_type,
            'created_at'        => (new DateTime())->format('Y-m-d H:i:s'),
            'created_by'        => $username,
            'status'            => '',
            'message'           => ''
        );

        $invoices = $this->getInvoicesPrint($orderInvoiceKey, $printCounter);

        if ($invoices == '404') {
            $param['status'] = 'Error';
            $param['message'] = 'Connection error!, please try again';
            $logInfo = $this->sendLogInfo($param);
            if($request->ajax()){
                return Response::json(['status' => false, 'messages' => 'Connection error!, please try again']);
            } else {
                return redirect()->back()->withErrors('Connection error!, please try again')->withInput();
            }
        }

        if (!$invoices->error) {
            $param['status']  = 'Success';
            $param['message'] = '';
            if ($invoiceType != 'SHIPMENT') {
                $logInfo      = $this->sendLogInfo($param);
            }
        } else {
            if ($paymentType == 'PayAtStore' && $invoiceType == 'INFO' && $printCounter == 2) {
                $decreaseCounter = $printCounter - 2;
            } else {
                $decreaseCounter = $printCounter - 1;
            }
            $seq              = $printcounterRepository->setPrintSeq($customerInvoiceNumber, $orderInvoiceKey,$decreaseCounter);
            $param['status']  = 'Error';
            $param['message'] = '[Reprint Invoice] ' . $invoices->errorMessage;
            $logInfo          = $this->sendLogInfo($param);
            return Response::json(['status' => false, 'messages' => '[Reprint Invoice] ' . $invoices->errorMessage]);
        }
        return Response::json(['status'=>true]);
    }
}
